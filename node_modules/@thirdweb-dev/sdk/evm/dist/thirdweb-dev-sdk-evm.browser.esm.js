export { G as ALL_ROLES, bi as AbiObjectSchema, bj as AbiSchema, bh as AbiTypeSchema, b9 as AddressOrEnsSchema, b8 as AddressSchema, v as AdminRoleMissingError, A as AssetNotFoundError, t as AuctionAlreadyStartedError, w as AuctionHasNotEndedError, bc as BYOCContractMetadataSchema, b5 as BigNumberSchema, b7 as BigNumberTransformSchema, b6 as BigNumberishSchema, ar as COMMON_FACTORY, C as CONTRACTS_MAP, aO as CONTRACT_ADDRESSES, ap as CREATE2_FACTORY_BYTECODE, ba as CallOverrideSchema, aS as ChainId, bm as ChainIdToAddressSchema, bD as CommonContractOutputSchema, bC as CommonContractSchema, bG as CommonPlatformFeeSchema, bF as CommonPrimarySaleSchema, bE as CommonRoyaltySchema, bI as CommonSymbolSchema, bH as CommonTrustedForwarderSchema, bA as CompilerMetadataFetchedSchema, bk as CompilerTypeInput, bz as ContractInfoSchema, bf as CustomContractDeploy, bd as CustomContractInput, be as CustomContractOutput, bg as CustomContractSchema, bn as CustomFactoryInput, au as DEPLOYER_ABI, at as DEPLOYER_BYTECODE, bp as DeployTypeInput, br as DeploymentNetworkInput, bV as DropErc1155ContractDeploy, bT as DropErc1155ContractInput, bU as DropErc1155ContractOutput, bW as DropErc1155ContractSchema, bR as DropErc721ContractDeploy, bP as DropErc721ContractInput, bQ as DropErc721ContractOutput, bS as DropErc721ContractSchema, D as DuplicateFileNameError, s as DuplicateLeafsError, E as EditionDropInitializer, a as EditionInitializer, aZ as EventType, x as ExtensionNotImplementedError, bs as ExtraPublishMetadataSchemaInput, bt as ExtraPublishMetadataSchemaOutput, bo as FactoryDeploymentSchema, r as FetchError, F as FileNameMissingError, bu as FullPublishMetadataSchemaInput, bv as FullPublishMetadataSchemaOutput, u as FunctionDeprecatedError, as as GAS_LIMIT_FOR_DEPLOYER, I as InvalidAddressError, aY as LINK_TOKEN_ADDRESS, L as ListingNotFoundError, bZ as MarketplaceContractDeploy, bX as MarketplaceContractInput, bY as MarketplaceContractOutput, b_ as MarketplaceContractSchema, M as MarketplaceInitializer, b as MarketplaceV3Initializer, bJ as MerkleSchema, q as MissingOwnerRoleError, o as MissingRoleError, c as MultiwrapInitializer, aW as NATIVE_TOKENS, aV as NATIVE_TOKEN_ADDRESS, N as NFTCollectionInitializer, d as NFTDropInitializer, p as NotEnoughTokensError, n as NotFoundError, aN as OZ_DEFENDER_FORWARDER_ADDRESS, i as PREBUILT_CONTRACTS_APPURI_MAP, h as PREBUILT_CONTRACTS_MAP, c1 as PackContractDeploy, b$ as PackContractInput, c0 as PackContractOutput, c2 as PackContractSchema, P as PackInitializer, bl as PreDeployMetadata, bB as PreDeployMetadataFetchedSchema, bw as ProfileSchemaInput, bx as ProfileSchemaOutput, cp as ProposalOutputSchema, by as PublishedContractSchema, Q as QuantityAboveLimitError, R as RestrictedTransferError, bq as RouterTypeInput, bb as SDKOptionsSchema, aq as SIGNATURE, b4 as SUPPORTED_FEATURES, e as SignatureDropInitializer, bK as SnapshotEntryInput, bM as SnapshotEntryWithProofSchema, bO as SnapshotInfoSchema, bL as SnapshotInputSchema, bN as SnapshotSchema, f as SplitInitializer, c5 as SplitsContractDeploy, c3 as SplitsContractInput, c4 as SplitsContractOutput, c6 as SplitsContractSchema, S as StaticJsonRpcBatchProvider, aH as THIRDWEB_DEPLOYER, T as TokenDropInitializer, ch as TokenErc1155ContractDeploy, cf as TokenErc1155ContractInput, cg as TokenErc1155ContractOutput, ci as TokenErc1155ContractSchema, c9 as TokenErc20ContractDeploy, c7 as TokenErc20ContractInput, c8 as TokenErc20ContractOutput, ca as TokenErc20ContractSchema, cd as TokenErc721ContractDeploy, cb as TokenErc721ContractInput, cc as TokenErc721ContractOutput, ce as TokenErc721ContractSchema, g as TokenInitializer, y as TransactionError, U as UploadError, cn as VoteContractDeploy, cl as VoteContractInput, cm as VoteContractOutput, co as VoteContractSchema, V as VoteInitializer, cj as VoteSettingsInputSchema, ck as VoteSettingsOuputSchema, W as WrongListingTypeError, aA as computeDeploymentAddress, aE as computeDeploymentInfo, aB as computeEOAForwarderAddress, aC as computeForwarderAddress, af as constructAbiFromBytecode, ab as detectFeatures, ac as detectFeaturesFromBytecode, aF as encodeConstructorParamsForImplementation, a0 as extractCommentFromMetadata, a1 as extractConstructorParamsFromAbi, a2 as extractFunctionsFromAbi, a7 as extractIPFSHashFromBytecode, a3 as extractMinimalProxyImplementationAddress, X as fetchAbiFromAddress, aJ as fetchAndCacheDeployMetadata, Y as fetchContractMetadata, K as fetchContractMetadataFromAddress, O as fetchContractMetadataFromBytecode, aa as fetchExtendedReleaseMetadata, a9 as fetchPreDeployMetadata, aI as fetchPublishedContractFromPolygon, a8 as fetchRawPredeployMetadata, ao as fetchSourceFilesFromMetadata, Z as formatCompilerMetadata, ag as getAllDetectedExtensions, ae as getAllDetectedExtensionsFromBytecode, ad as getAllDetectedFeatures, a$ as getChainIdFromNetwork, b0 as getChainIdOrName, a_ as getChainProvider, ak as getCompositeABI, aP as getContractAddressByChainId, J as getContractMetadataFromCache, k as getContractName, aQ as getContractPublisherAddress, j as getContractTypeForRemoteName, ax as getCreate2FactoryAddress, aG as getCreate2FactoryDeploymentInfo, az as getInitBytecodeWithSalt, aD as getKeylessTxn, aR as getMultichainRegistryAddress, aX as getNativeTokenByChainId, b2 as getProviderFromRpcUrl, H as getRoleHash, ay as getSaltHash, b3 as getSignerAndProvider, aU as getSupportedChains, _ as hasMatchingAbi, B as includesErrorMessage, b1 as isChainConfig, av as isContractDeployed, an as isDowngradeVersion, aw as isEIP155Enforced, ai as isExtensionEnabled, ah as isFeatureEnabled, am as isIncrementalVersion, l as isProvider, m as isSigner, aj as joinABIs, $ as matchesAbiFromBytecode, z as parseRevertReason, aL as resolveAddress, a5 as resolveContractUriAndBytecode, a4 as resolveContractUriFromAddress, aK as resolveEns, a6 as resolveImplementation, aT as setSupportedChains, aM as signTypedDataInternal, al as toSemver } from '../../dist/index-ec6b8f75.browser.esm.js';
export { C as ContractEncoder, f as fetchCurrencyMetadata, a as fetchCurrencyValue, i as isNativeToken } from '../../dist/fetchCurrencyValue-e741646c.browser.esm.js';
export { b as ContractAppURI, a as ContractEvents, C as ContractMetadata, G as GasCostEstimator, d as detectContractFeature, h as hasFunction, t as toEther } from '../../dist/contract-appuri-0e9d1dc5.browser.esm.js';
export { C as ContractRoles } from '../../dist/contract-roles-0f7fac47.browser.esm.js';
export { a as ContractOwner, C as ContractRoyalty, D as DelayedReveal } from '../../dist/contract-owner-fde309a2.browser.esm.js';
export { C as ContractPrimarySale } from '../../dist/contract-sales-e536be63.browser.esm.js';
export { D as DropClaimConditions } from '../../dist/drop-claim-conditions-e11d4a21.browser.esm.js';
export { D as DropErc1155ClaimConditions, E as Erc1155, a as Erc1155SignatureMintable } from '../../dist/erc-1155-95855f61.browser.esm.js';
export { E as Erc20, a as Erc20SignatureMintable, n as normalizeAmount } from '../../dist/erc-20-636d3b77.browser.esm.js';
export { E as Erc721, a as Erc721WithQuantitySignatureMintable, t as toWei } from '../../dist/erc-721-6f688962.browser.esm.js';
export { A as Account, a as AccountFactory, f as AdminFlag, d as Airdrop1155, b as Airdrop20, c as Airdrop721, C as ContractPublishedMetadata, D as DEFAULT_PERMISSIONS, E as ExtensionManager, P as PermissionSnapshotSchema, h as SignerPermissionRequest, g as SignerPermissionRequestV1, S as SignerPermissionsSchema, e as extractEventsFromAbi } from '../../dist/airdrop-erc1155-aa039512.browser.esm.js';
export { C as ContractInterceptor } from '../../dist/contract-interceptor-d7b164a7.browser.esm.js';
export { C as ContractPlatformFee } from '../../dist/contract-platform-fee-65588e52.browser.esm.js';
export { D as DeployTransaction, T as Transaction, e as engineSendFunction, c as estimateTransactionCost, g as getDefaultGasOverrides, a as getDynamicFeeData, b as getGasPrice, d as getPolygonGasPriorityFee, p as prepareGaslessRequest } from '../../dist/transactions-31bf3ef7.browser.esm.js';
export { M as MarketplaceV3DirectListings, a as MarketplaceV3EnglishAuctions, b as MarketplaceV3Offers, S as Status } from '../../dist/marketplacev3-offers-b54f0f72.browser.esm.js';
export { A as APPROVED_IMPLEMENTATIONS, a as ContractDeployer, C as ContractVerifier, L as LOCAL_NODE_PKEY, S as SUPPORTED_CHAIN_IDS, T as ThirdwebSDK, U as UserWallet, f as checkVerificationStatus, h as computeCloneFactoryAddress, t as convertParamValues, l as deployCreate2Factory, m as directDeployDeterministic, o as directDeployDeterministicPublished, n as directDeployDeterministicWithUri, e as extractFunctionParamsFromAbi, b as getAllDetectedExtensionNames, g as getAllDetectedFeatureNames, x as getApprovedImplementation, y as getDefaultTrustedForwarders, u as getDeployArguments, k as getEncodedConstructorParamsForThirdwebContract, j as getThirdwebContractAddress, w as getTrustedForwarders, i as isVerifiedOnEtherscan, q as predictAddressDeterministic, s as predictAddressDeterministicPublished, r as predictAddressDeterministicWithUri, p as predictThirdwebContractAddress, d as verify, v as verifyThirdwebPrebuiltImplementation } from '../../dist/sdk-47830a68.browser.esm.js';
export { B as BaseSignaturePayloadInput, j as ClaimConditionInputArray, i as ClaimConditionInputSchema, e as ClaimConditionMetadataSchema, k as ClaimConditionOutputSchema, C as ClaimEligibility, l as CurrencySchema, m as CurrencyValueSchema, G as GenericRequest, w as MintRequest1155, M as MintRequest20, v as MintRequest721, x as MintRequest721withQuantity, P as PartialClaimConditionInputSchema, q as Signature1155PayloadInput, r as Signature1155PayloadInputWithTokenId, s as Signature1155PayloadOutput, S as Signature20PayloadInput, n as Signature20PayloadOutput, o as Signature721PayloadInput, p as Signature721PayloadOutput, t as Signature721WithQuantityInput, u as Signature721WithQuantityOutput, a as approveErc20Allowance, c as convertToReadableQuantity, d as createMerkleTreeFromAllowList, b as createSnapshot, f as fetchSnapshotEntryForAddress, g as getProofsForAllowListEntry, h as hashAllowListEntry } from '../../dist/signature-c77e1dd8.browser.esm.js';
export { f as EditionMetadataInputOrUriSchema, e as EditionMetadataInputSchema, E as EditionMetadataOutputSchema, b as EditionMetadataWithOwnerOutputSchema, O as OptionalPropertiesInput, P as ProposalState, T as TokenMintInputSchema, c as computeNativeTokenAddress, d as deployContractDeterministicRaw, g as getCachedAbiForContract, m as matchesPrebuiltAbi, a as toDisplayValue, t as toUnits } from '../../dist/token-8fa3df4d.browser.esm.js';
export { e as extractConstructorParams, a as extractFunctions } from '../../dist/contract-publisher-47396b2c.browser.esm.js';
export { E as EndDateSchema, R as RawDateSchema, S as StartDateSchema, a as assertEnabled } from '../../dist/assertEnabled-6e8cbc9b.browser.esm.js';
export { c as cleanCurrencyAddress } from '../../dist/cleanCurrencyAddress-1e241c5d.browser.esm.js';
export { n as normalizePriceValue } from '../../dist/normalizePriceValue-050f8e24.browser.esm.js';
export { s as setErc20Allowance } from '../../dist/setErc20Allowance-43154c75.browser.esm.js';
export { h as hasERC20Allowance } from '../../dist/hasERC20Allowance-9675bc7e.browser.esm.js';
export { c as createTransactionBatches, d as deployContractDeterministic, a as deployWithThrowawayDeployer, e as estimateGasForDeploy, g as getDeploymentInfo } from '../../dist/deployContractDeterministic-b772b800.browser.esm.js';
export { a as InterfaceId_IERC1155, I as InterfaceId_IERC721 } from '../../dist/QueryParams-d97052e7.browser.esm.js';
export { L as ListingType } from '../../dist/ListingType-cba090cb.browser.esm.js';
export { V as VoteType } from '../../dist/Vote-3b66775c.browser.esm.js';
export { b as ERC1155WrappableSchema, E as ERC20WrappableSchema, a as ERC721WrappableSchema, d as PackMetadataInputSchema, c as PackRewardsOutputSchema, P as PackRewardsSchema } from '../../dist/pack-3adf2c58.browser.esm.js';
export { c as getBlock, d as getBlockNumber, e as getBlockWithTransactions, b as getChainId, g as getContract, a as getContractFromAbi, w as watchBlock, f as watchBlockNumber, h as watchBlockWithTransactions, i as watchTransactions } from '../../dist/watchTransactions-4f43ccea.browser.esm.js';
import 'ethers';
import 'zod';
import '@thirdweb-dev/chains';
import '@thirdweb-dev/crypto';
import 'tiny-invariant';
import 'bn.js';
import 'bs58';
import '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';
import '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';
import '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';
import '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';
import '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';
import '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';
import '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';
import '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';
import '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';
import 'ethers/lib/utils';
import 'eventemitter3';
import '@thirdweb-dev/storage';
import 'fast-deep-equal';
import '../../dist/marketplace-a0dc79bd.browser.esm.js';
import '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';
import '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';
import '@thirdweb-dev/generated-abis';
import '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';
import '@thirdweb-dev/merkletree';
import 'uuid';
import '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';

// handle browser vs node global
// eslint-disable-next-line better-tree-shaking/no-top-level-side-effects
globalThis.global = globalThis;

//#endregion @r/legacy_packages/sdk/src/evm/schema
